CREATE TABLE BOOKS(
  BOOK_ID SERIAL PRIMARY KEY,
  TITLE VARCHAR(100),
  AUTHOR VARCHAR(100),
  GENRE VARCHAR(50),
  PUBLISHED_YEAR INT,
  PRICE NUMERIC(10,2),
  STOCK INT
);

SELECT * FROM BOOKS;

CREATE TABLE CUSTOMERS(
    CUSTOMER_ID SERIAL PRIMARY KEY,
	NAME VARCHAR(100),
	EMAIL VARCHAR(50),
	PHONE VARCHAR(15),
	CITY VARCHAR(50),
	COUNTRY VARCHAR(150)
);

SELECT * FROM CUSTOMERS;

CREATE TABLE ORDERS(
    ORDER_ID SERIAL PRIMARY KEY,
	CUSTOMER_ID INT REFERENCES CUSTOMERS(CUSTOMER_ID),
	BOOK_ID INT REFERENCES BOOKS(BOOK_ID),
	ORDER_DATE DATE,
	QUANTITY INT,
	TOTAL_AMOUNT NUMERIC(10,2)
);

SELECT * FROM ORDERS;

-- QUESTIONS AND THERE SOLUTIONS:

-- 1.RETRIEVE ALL BOOKS IN THE 'Fiction' GENRE:
SELECT * FROM BOOKS 
WHERE GENRE='Fiction';


-- 2.FIND BOOKS PUBLISHED AFTER THE YEAR 1950:
SELECT * FROM BOOKS 
WHERE PUBLISHED_YEAR>1950;


-- 3.LIST ALL CUSTOMERS FROM THE CANADA:
SELECT * FROM CUSTOMERS 
WHERE COUNTRY='Canada';


-- 4.SHOW ORDER PLACE IN NOVEMBER 2023:
SELECT * FROM ORDERS 
WHERE ORDER_DATE 
BETWEEN '2023-11-01' AND '2023-11-30';


-- 5.RETRIEVE THE TOTAL STOCK OF BOOKS AVAILABLE:
SELECT SUM(STOCK) AS TOTAL_STOCK FROM BOOKS;


-- 6.FIND THE DETAILS OF THE MOST EXPENSIVE BOOK:
SELECT * FROM BOOKS 
ORDER BY PRICE 
DESC LIMIT 1;


-- 7.SHOW ALL CUSTOMERS WHO ORDERED MORE THAN 1 QUANTITY OF A BOOK:
SELECT * FROM ORDERS 
WHERE QUANTITY>1;


-- 8.RETRIEVE ALL ORDER WHERE THE TOTAL AMOUNT EXCEEDS $20:
SELECT * FROM ORDERS
WHERE TOTAL_AMOUNT>20;


-- 9.LIST ALL GENRES AVAILABLE IN THE BOOKS TABLE:
SELECT DISTINCT GENRE FROM BOOKS;


-- 10.FIND THE BOOK WITH THE LOWEST STOCK:
SELECT * FROM BOOKS ORDER BY STOCK ASC LIMIT 1;


-- 11.CALCULATE THE TOTAL REVENUE GENERATED FROM ALL ORDERS:
SELECT SUM(TOTAL_AMOUNT) AS REVENUE 
FROM ORDERS;

-- ADVANCED QUESTIONS:

-- 1.RETRIEVE THE TOTAL NUMBER OF BOOKS SOLD FOR EACH GENRE:
SELECT B.GENRE,SUM(O.QUANTITY) AS TOTAL_BOOKS_SOLD
FROM ORDERS O
JOIN BOOKS B ON O.BOOK_ID = B.BOOK_ID
GROUP BY B.GENRE;


-- 2.FIND THE AVERAGE PRICE OF BOOKS IN THE 'Fantasy' GENRE:
SELECT AVG(PRICE) AS AVG_PRICE
FROM BOOKS
WHERE GENRE = 'Fantasy';


-- 3.LIST CUSTOMERS WHO HAVE PLACED AT LEAST 2 ORDERS:
SELECT O.CUSTOMER_ID,C.NAME,COUNT(O.ORDER_ID) AS ORDER_COUNT
FROM ORDERS O
JOIN CUSTOMERS C ON O.CUSTOMER_ID=C.CUSTOMER_ID
GROUP BY O.CUSTOMER_ID,C.NAME
HAVING COUNT(ORDER_ID)>=2;


-- 4.FIND OUT MOST FREQUENTLY ORDERED BOOK:
SELECT O.BOOK_ID,B.TITLE,COUNT(ORDER_ID) AS ORDER_COUNT
FROM ORDERS O
JOIN BOOKS B ON O.BOOK_ID=B.BOOK_ID
GROUP BY O.BOOK_ID,B.TITLE
ORDER BY ORDER_COUNT DESC LIMIT 1;


-- 5.SHOW THE TOP 3 MOST EXPENSIVE BOOKS OF 'Fantasy' GENRE:
SELECT * FROM BOOKS
WHERE GENRE='Fantasy'
ORDER BY PRICE DESC LIMIT 3;

-- 6.RETRIEVE THE TOTAL QUANTITY OF BOOKS SOLD BY EACH AUTHOR:
SELECT B.AUTHOR,SUM(O.QUANTITY) AS TOTAL_BOOKS_SOLD
FROM ORDERS O
JOIN BOOKS B ON B.BOOK_ID=O.BOOK_ID
GROUP BY B.AUTHOR
ORDER BY TOTAL_BOOKS_SOLD DESC
LIMIT 5;

-- 7.LIST THE CITIES WHERE CUSTOMERS WHO SPENT OVER $30 ARE LOCATED:
SELECT DISTINCT C.CITY,O.TOTAL_AMOUNT
FROM ORDERS O
JOIN CUSTOMERS C ON O.CUSTOMER_ID=C.CUSTOMER_ID
WHERE O.TOTAL_AMOUNT>30;


-- 8.FIND THE CUSTOMER WHO SPENT THE MOST ON ORDERS:
SELECT C.CUSTOMER_ID,C.NAME,SUM(O.TOTAL_AMOUNT) AS TOTAL_SPENT
FROM ORDERS O
JOIN CUSTOMERS C ON O.CUSTOMER_ID=C.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID,C.NAME
ORDER BY TOTAL_SPENT DESC LIMIT 1;


-- 9.CALCULATE THE STOCK REMAINING AFTER FULFILLING ALL ORDERS:
SELECT B.BOOK_ID,B.TITLE,B.STOCK,COALESCE(SUM(O.QUANTITY),0) AS ORDER_QUANTITY,
B.STOCK-COALESCE(SUM(O.QUANTITY),0) AS REMAINING_QUANTITY
FROM BOOKS B
LEFT JOIN ORDERS O ON B.BOOK_ID=O.BOOK_ID
GROUP BY B.BOOK_ID;






























